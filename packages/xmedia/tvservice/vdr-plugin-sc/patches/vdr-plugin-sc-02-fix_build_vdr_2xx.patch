diff -Naurp vdr-plugin-sc-a6fc7dc/cam.c vdr-plugin-sc-a6fc7dc-patch/cam.c
--- vdr-plugin-sc-a6fc7dc/cam.c	2014-11-06 00:35:48.000000000 +0200
+++ vdr-plugin-sc-a6fc7dc-patch/cam.c	2017-07-24 09:46:40.000000000 +0300
@@ -1564,7 +1564,7 @@ private:
   int numcaids;
   caid_t caids[MAX_CI_SLOT_CAIDS+1];
 public:
-  cChannelCaids(cChannel *channel);
+  cChannelCaids(const cChannel *channel);
   bool IsChannel(cChannel *channel);
   void Sort(void);
   void Del(caid_t caid);
@@ -1578,7 +1578,7 @@ public:
   int Transponder(void) const { return transponder; }
   };
 
-cChannelCaids::cChannelCaids(cChannel *channel)
+cChannelCaids::cChannelCaids(const cChannel *channel)
 {
   prg=channel->Sid(); source=channel->Source(); transponder=channel->Transponder();
   numcaids=0;
@@ -2187,6 +2187,15 @@ void cCam::BuildCaids(bool force)
   if(caidTimer.TimedOut() || force || (rebuildcaids && triggerTimer.TimedOut())) {
     PRINTF(L_CORE_CAIDS,"%s: building caid lists",devId);
     cChannelList list(devId);
+#if VDRVERSNUM >= 20301
+    LOCK_CHANNELS_READ;
+    for (const cChannel *channel = Channels->First(); channel; channel = Channels->Next(channel)) {
+      if(!channel->GroupSep() && channel->Ca()>=CA_ENCRYPTED_MIN && device->ProvidesTransponder(channel)) {
+        cChannelCaids *ch=new cChannelCaids(channel);
+        if(ch) list.Add(ch);
+        }
+      }
+#else
     Channels.Lock(false);
     for(cChannel *channel=Channels.First(); channel; channel=Channels.Next(channel)) {
       if(!channel->GroupSep() && channel->Ca()>=CA_ENCRYPTED_MIN && device->ProvidesTransponder(channel)) {
@@ -2195,6 +2204,7 @@ void cCam::BuildCaids(bool force)
         }
       }
     Channels.Unlock();
+#endif
     list.Unique(true);
     list.CheckIgnore();
     list.Unique(false);
